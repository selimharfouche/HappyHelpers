name: Ransomware Tracker Scraping

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      # Cache Tor installation
      - name: Cache Tor
        id: cache-tor
        uses: actions/cache@v3
        with:
          path: ~/.cache/tor-binary
          key: ${{ runner.os }}-tor-${{ hashFiles('requirements.txt') }}

      - name: Install Tor
        if: steps.cache-tor.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y tor
          mkdir -p ~/.cache/tor-binary
          cp $(which tor) ~/.cache/tor-binary/
      
      - name: Start Tor Service
        run: |
          sudo service tor start
          sleep 3
          netstat -tulpn | grep 9050 || echo "Warning: Tor might not be running on port 9050"

      - name: Setup Firefox
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: 'latest'

      - name: Setup Geckodriver
        uses: browser-actions/setup-geckodriver@latest
        with:
          token: ${{ github.token }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install only required packages
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # If no requirements.txt, install essential packages
            pip install selenium beautifulsoup4 requests
          fi

      - name: Configure for GitHub Actions
        run: |
          # Create configurations directory
          mkdir -p /tmp/github_configs/code
          
          # Create all config files in a single step
          cat > /tmp/github_configs/code/scraping_config.json << 'EOF'
          {
            "snapshots": {
              "save_html": false,
              "max_snapshots_per_site": 5,
              "cleanup_old_snapshots": true
            },
            "scheduling": {
              "frequency_hours": 6,
              "randomize_start_time": true
            }
          }
          EOF
          
          cat > /tmp/github_configs/code/proxy_config.json << 'EOF'
          {
            "proxy": {
              "type": "socks",
              "host": "127.0.0.1",
              "port": 9050,
              "remote_dns": true
            },
            "tor": {
              "auto_start": false
            }
          }
          EOF
          
          # Create browser config with resolved Firefox path
          FIREFOX_PATH=$(which firefox)
          cat > /tmp/github_configs/code/browser_config.json << EOF
          {
            "timing": {
              "min_wait_time": 10,
              "max_wait_time": 20,
              "tor_check_wait_time": 3,
              "page_load_timeout": 120
            },
            "anti_bot": {
              "enabled": true,
              "randomize_timing": true
            },
            "user_agent": "Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0",
            "firefox_binary": "${FIREFOX_PATH}"
          }
          EOF
          
          # Create necessary data directories in one step
          mkdir -p data/output data/html_snapshots data/processed

      - name: Run scraper and process entities
        run: |
          # Export environment variable to point to temporary config
          export GITHUB_CONFIG_PATH="/tmp/github_configs"
          
          # Run the scraper
          cd tracker
          python main.py
          
          # Process entities immediately after scraping
          cd processing
          python process_entities.py
          echo "Entity processing and archiving completed"

      - name: Commit and push if there are changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Only commit changes to data directory
          git add -A data/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update data from scheduled scrape"
            git push
          fi